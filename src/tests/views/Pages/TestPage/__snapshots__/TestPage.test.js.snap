// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TestPage snapshot 1`] = `
.c0 {
  background-color: #007bff;
  border-color: #007bff;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c0:hover {
  background-color: #006fe6;
  border-color: #006fe6;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,123,255,.25);
  color: #ffffff;
}

.c0:active {
  background-color: #006fe6;
  border-color: #0062cc;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c1 {
  background-color: #5a6169;
  border-color: #5a6169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c1:hover {
  background-color: #4e545b;
  border-color: #4e545b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(90,97,105,.25);
  color: #ffffff;
}

.c1:active {
  background-color: #4e545b;
  border-color: #42484e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c2 {
  background-color: #17c671;
  border-color: #17c671;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c2:hover {
  background-color: #14af64;
  border-color: #14af64;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(23,198,113,.25);
  color: #ffffff;
}

.c2:active {
  background-color: #14af64;
  border-color: #129857;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c3 {
  background-color: #00b8d8;
  border-color: #00b8d8;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c3:hover {
  background-color: #00a2bf;
  border-color: #00a2bf;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,184,216,.25);
  color: #ffffff;
}

.c3:active {
  background-color: #00a2bf;
  border-color: #008da5;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c4 {
  background-color: #c4183c;
  border-color: #c4183c;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c4:hover {
  background-color: #ad1535;
  border-color: #ad1535;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(196,24,60,.25);
  color: #ffffff;
}

.c4:active {
  background-color: #ad1535;
  border-color: #97122e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c5 {
  background-color: #ffb400;
  border-color: #ffb400;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c5:hover {
  background-color: #e6a200;
  border-color: #e6a200;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,180,0,.25);
  color: #ffffff;
}

.c5:active {
  background-color: #e6a200;
  border-color: #cc9000;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c6 {
  background-color: #212529;
  border-color: #212529;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c6:hover {
  background-color: #16181b;
  border-color: #16181b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(33,37,41,.25);
  color: #ffffff;
}

.c6:active {
  background-color: #16181b;
  border-color: #0a0c0d;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c7 {
  background-color: #ffffff;
  border-color: #e1e5eb;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #5a6169;
}

.c7:hover {
  background-color: #ffffff;
  border-color: #e1e5eb;
  box-shadow: 0 0.125rem 0.625rem rgba(129,142,163,.2),0 0.0625rem 0.125rem rgba(129,142,164,.3);
  color: #5a6169;
}

.c7:active {
  background-color: #007bff;
  border-color: #007bff;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c8 {
  background-color: #674eec;
  border-color: #674eec;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c8:hover {
  background-color: #5337ea;
  border-color: #5337ea;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(103,78,236,.25);
  color: #ffffff;
}

.c8:active {
  background-color: #5337ea;
  border-color: #3f20e7;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c9 {
  background-color: #1adba2;
  border-color: #1adba2;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c9:hover {
  background-color: #17c491;
  border-color: #17c491;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(26,219,162,.25);
  color: #ffffff;
}

.c9:active {
  background-color: #17c491;
  border-color: #15ad80;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c10 {
  background-color: #ff4169;
  border-color: #ff4169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c10:hover {
  background-color: #ff2855;
  border-color: #ff2855;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,65,105,.25);
  color: #ffffff;
}

.c10:active {
  background-color: #ff2855;
  border-color: #ff0e41;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c11 {
  background-color: #ffffff;
  border-color: #007bff;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #007bff;
}

.c11:hover {
  background-color: #006fe6;
  border-color: #006fe6;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,123,255,.25);
  color: #ffffff;
}

.c11:active {
  border-color: #0062cc;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c12 {
  background-color: #ffffff;
  border-color: #5a6169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #5a6169;
}

.c12:hover {
  background-color: #4e545b;
  border-color: #4e545b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(90,97,105,.25);
  color: #ffffff;
}

.c12:active {
  border-color: #42484e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c13 {
  background-color: #ffffff;
  border-color: #17c671;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #17c671;
}

.c13:hover {
  background-color: #14af64;
  border-color: #14af64;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(23,198,113,.25);
  color: #ffffff;
}

.c13:active {
  border-color: #129857;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c14 {
  background-color: #ffffff;
  border-color: #00b8d8;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #00b8d8;
}

.c14:hover {
  background-color: #00a2bf;
  border-color: #00a2bf;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,184,216,.25);
  color: #ffffff;
}

.c14:active {
  border-color: #008da5;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c15 {
  background-color: #ffffff;
  border-color: #c4183c;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #c4183c;
}

.c15:hover {
  background-color: #ad1535;
  border-color: #ad1535;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(196,24,60,.25);
  color: #ffffff;
}

.c15:active {
  border-color: #97122e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c16 {
  background-color: #ffffff;
  border-color: #ffb400;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffb400;
}

.c16:hover {
  background-color: #e6a200;
  border-color: #e6a200;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,180,0,.25);
  color: #ffffff;
}

.c16:active {
  border-color: #cc9000;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c17 {
  background-color: #ffffff;
  border-color: #212529;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #212529;
}

.c17:hover {
  background-color: #16181b;
  border-color: #16181b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(33,37,41,.25);
  color: #ffffff;
}

.c17:active {
  border-color: #0a0c0d;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c18 {
  background-color: #ffffff;
  border-color: transparent;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #5a6169;
}

.c18:hover {
  background-color: #ffffff;
  border-color: transparent;
  box-shadow: 0 0.125rem 0.625rem rgba(129,142,163,.2),0 0.0625rem 0.125rem rgba(129,142,164,.3);
  color: #5a6169;
}

.c18:active {
  border-color: #007bff;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c19 {
  background-color: #ffffff;
  border-color: #674eec;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #674eec;
}

.c19:hover {
  background-color: #5337ea;
  border-color: #5337ea;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(103,78,236,.25);
  color: #ffffff;
}

.c19:active {
  border-color: #3f20e7;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c20 {
  background-color: #ffffff;
  border-color: #1adba2;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #1adba2;
}

.c20:hover {
  background-color: #17c491;
  border-color: #17c491;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(26,219,162,.25);
  color: #ffffff;
}

.c20:active {
  border-color: #15ad80;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c21 {
  background-color: #ffffff;
  border-color: #ff4169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.125;
  padding: .5625rem 1rem;
  font-size: .75rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ff4169;
}

.c21:hover {
  background-color: #ff2855;
  border-color: #ff2855;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,65,105,.25);
  color: #ffffff;
}

.c21:active {
  border-color: #ff0e41;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c22 {
  background-color: #007bff;
  border-color: #007bff;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c22:hover {
  background-color: #006fe6;
  border-color: #006fe6;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,123,255,.25);
  color: #ffffff;
}

.c22:active {
  background-color: #006fe6;
  border-color: #0062cc;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c23 {
  background-color: #5a6169;
  border-color: #5a6169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c23:hover {
  background-color: #4e545b;
  border-color: #4e545b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(90,97,105,.25);
  color: #ffffff;
}

.c23:active {
  background-color: #4e545b;
  border-color: #42484e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c24 {
  background-color: #17c671;
  border-color: #17c671;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c24:hover {
  background-color: #14af64;
  border-color: #14af64;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(23,198,113,.25);
  color: #ffffff;
}

.c24:active {
  background-color: #14af64;
  border-color: #129857;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c25 {
  background-color: #00b8d8;
  border-color: #00b8d8;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c25:hover {
  background-color: #00a2bf;
  border-color: #00a2bf;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,184,216,.25);
  color: #ffffff;
}

.c25:active {
  background-color: #00a2bf;
  border-color: #008da5;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c26 {
  background-color: #c4183c;
  border-color: #c4183c;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c26:hover {
  background-color: #ad1535;
  border-color: #ad1535;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(196,24,60,.25);
  color: #ffffff;
}

.c26:active {
  background-color: #ad1535;
  border-color: #97122e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c27 {
  background-color: #ffb400;
  border-color: #ffb400;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c27:hover {
  background-color: #e6a200;
  border-color: #e6a200;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,180,0,.25);
  color: #ffffff;
}

.c27:active {
  background-color: #e6a200;
  border-color: #cc9000;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c28 {
  background-color: #212529;
  border-color: #212529;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c28:hover {
  background-color: #16181b;
  border-color: #16181b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(33,37,41,.25);
  color: #ffffff;
}

.c28:active {
  background-color: #16181b;
  border-color: #0a0c0d;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c29 {
  background-color: #ffffff;
  border-color: #e1e5eb;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #5a6169;
}

.c29:hover {
  background-color: #ffffff;
  border-color: #e1e5eb;
  box-shadow: 0 0.125rem 0.625rem rgba(129,142,163,.2),0 0.0625rem 0.125rem rgba(129,142,164,.3);
  color: #5a6169;
}

.c29:active {
  background-color: #007bff;
  border-color: #007bff;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c30 {
  background-color: #674eec;
  border-color: #674eec;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c30:hover {
  background-color: #5337ea;
  border-color: #5337ea;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(103,78,236,.25);
  color: #ffffff;
}

.c30:active {
  background-color: #5337ea;
  border-color: #3f20e7;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c31 {
  background-color: #1adba2;
  border-color: #1adba2;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c31:hover {
  background-color: #17c491;
  border-color: #17c491;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(26,219,162,.25);
  color: #ffffff;
}

.c31:active {
  background-color: #17c491;
  border-color: #15ad80;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c32 {
  background-color: #ff4169;
  border-color: #ff4169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffffff;
}

.c32:hover {
  background-color: #ff2855;
  border-color: #ff2855;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,65,105,.25);
  color: #ffffff;
}

.c32:active {
  background-color: #ff2855;
  border-color: #ff0e41;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c33 {
  background-color: #ffffff;
  border-color: #007bff;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #007bff;
}

.c33:hover {
  background-color: #006fe6;
  border-color: #006fe6;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,123,255,.25);
  color: #ffffff;
}

.c33:active {
  border-color: #0062cc;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c34 {
  background-color: #ffffff;
  border-color: #5a6169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #5a6169;
}

.c34:hover {
  background-color: #4e545b;
  border-color: #4e545b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(90,97,105,.25);
  color: #ffffff;
}

.c34:active {
  border-color: #42484e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c35 {
  background-color: #ffffff;
  border-color: #17c671;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #17c671;
}

.c35:hover {
  background-color: #14af64;
  border-color: #14af64;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(23,198,113,.25);
  color: #ffffff;
}

.c35:active {
  border-color: #129857;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c36 {
  background-color: #ffffff;
  border-color: #00b8d8;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #00b8d8;
}

.c36:hover {
  background-color: #00a2bf;
  border-color: #00a2bf;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(0,184,216,.25);
  color: #ffffff;
}

.c36:active {
  border-color: #008da5;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c37 {
  background-color: #ffffff;
  border-color: #c4183c;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #c4183c;
}

.c37:hover {
  background-color: #ad1535;
  border-color: #ad1535;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(196,24,60,.25);
  color: #ffffff;
}

.c37:active {
  border-color: #97122e;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c38 {
  background-color: #ffffff;
  border-color: #ffb400;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ffb400;
}

.c38:hover {
  background-color: #e6a200;
  border-color: #e6a200;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,180,0,.25);
  color: #ffffff;
}

.c38:active {
  border-color: #cc9000;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c39 {
  background-color: #ffffff;
  border-color: #212529;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #212529;
}

.c39:hover {
  background-color: #16181b;
  border-color: #16181b;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(33,37,41,.25);
  color: #ffffff;
}

.c39:active {
  border-color: #0a0c0d;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c40 {
  background-color: #ffffff;
  border-color: transparent;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #5a6169;
}

.c40:hover {
  background-color: #ffffff;
  border-color: transparent;
  box-shadow: 0 0.125rem 0.625rem rgba(129,142,163,.2),0 0.0625rem 0.125rem rgba(129,142,164,.3);
  color: #5a6169;
}

.c40:active {
  border-color: #007bff;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c41 {
  background-color: #ffffff;
  border-color: #674eec;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #674eec;
}

.c41:hover {
  background-color: #5337ea;
  border-color: #5337ea;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(103,78,236,.25);
  color: #ffffff;
}

.c41:active {
  border-color: #3f20e7;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c42 {
  background-color: #ffffff;
  border-color: #1adba2;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #1adba2;
}

.c42:hover {
  background-color: #17c491;
  border-color: #17c491;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(26,219,162,.25);
  color: #ffffff;
}

.c42:active {
  border-color: #15ad80;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

.c43 {
  background-color: #ffffff;
  border-color: #ff4169;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: 1.5;
  padding: 0.4286rem 0.875rem;
  font-size: 0.6875rem;
  -webkit-transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: #ff4169;
}

.c43:hover {
  background-color: #ff2855;
  border-color: #ff2855;
  box-shadow: 0 5px 15px rgba(0,0,0,.05),0 4px 10px rgba(255,65,105,.25);
  color: #ffffff;
}

.c43:active {
  border-color: #ff0e41;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125)!important;
  color: #ffffff;
}

<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "activeColors": Object {
          "danger": "#97122e",
          "dark": "#0a0c0d",
          "info": "#008da5",
          "java": "#15ad80",
          "primary": "#0062cc",
          "royalBlue": "#3f20e7",
          "salmon": "#ff0e41",
          "secondary": "#42484e",
          "success": "#129857",
          "warning": "#cc9000",
          "white": "#007bff",
        },
        "border": "#e1e5eb",
        "danger": "#c4183c",
        "dark": "#212529",
        "hoverColors": Object {
          "danger": "#ad1535",
          "dark": "#16181b",
          "info": "#00a2bf",
          "java": "#17c491",
          "primary": "#006fe6",
          "royalBlue": "#5337ea",
          "salmon": "#ff2855",
          "secondary": "#4e545b",
          "success": "#14af64",
          "warning": "#e6a200",
          "white": "#ffffff",
        },
        "info": "#00b8d8",
        "java": "#1adba2",
        "primary": "#007bff",
        "royalBlue": "#674eec",
        "salmon": "#ff4169",
        "secondary": "#5a6169",
        "success": "#17c671",
        "text": "#5a6169",
        "warning": "#ffb400",
        "white": "#ffffff",
      },
      "shadows": Object {
        "danger": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(196,24,60,.25)",
        "dark": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(33,37,41,.25)",
        "info": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(0,184,216,.25)",
        "inset": "inset 0 3px 5px rgba(0,0,0,.125)!important",
        "java": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(26,219,162,.25)",
        "primary": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(0,123,255,.25)",
        "royalBlue": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(103,78,236,.25)",
        "salmon": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(255,65,105,.25)",
        "secondary": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(90,97,105,.25)",
        "success": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(23,198,113,.25)",
        "warning": "0 5px 15px rgba(0,0,0,.05), 0 4px 10px rgba(255,180,0,.25)",
        "white": "0 0.125rem 0.625rem rgba(129,142,163,.2), 0 0.0625rem 0.125rem rgba(129,142,164,.3)",
      },
    }
  }
>
  <TestPage>
    <div>
      <div>
        <Button
          color="primary"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="primary"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="primary"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c0"
                color="primary"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="secondary"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="secondary"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="secondary"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c1"
                color="secondary"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="success"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="success"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="success"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c2"
                color="success"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="info"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="info"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="info"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c3"
                color="info"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="danger"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="danger"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="danger"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c4"
                color="danger"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="warning"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="warning"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="warning"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c5"
                color="warning"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="dark"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="dark"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="dark"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c6"
                color="dark"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="white"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="white"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="white"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c7"
                color="white"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="royalBlue"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="royalBlue"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="royalBlue"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c8"
                color="royalBlue"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="java"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="java"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="java"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c9"
                color="java"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="salmon"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="salmon"
            fill="fill"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="salmon"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c10"
                color="salmon"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
      </div>
      <div>
        <Button
          color="primary"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="primary"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="primary"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c11"
                color="primary"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="secondary"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="secondary"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="secondary"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c12"
                color="secondary"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="success"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="success"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="success"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c13"
                color="success"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="info"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="info"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="info"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c14"
                color="info"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="danger"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="danger"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="danger"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c15"
                color="danger"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="warning"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="warning"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="warning"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c16"
                color="warning"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="dark"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="dark"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="dark"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c17"
                color="dark"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="white"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="white"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="white"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c18"
                color="white"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="royalBlue"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="royalBlue"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="royalBlue"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c19"
                color="royalBlue"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="java"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="java"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="java"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c20"
                color="java"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="salmon"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          stopPropagation={true}
        >
          <styled.button
            color="salmon"
            fill="outline"
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              color="salmon"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c21"
                color="salmon"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
      </div>
      <div>
        <Button
          color="primary"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="primary"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="primary"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c22"
                color="primary"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="secondary"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="secondary"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="secondary"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c23"
                color="secondary"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="success"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="success"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="success"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c24"
                color="success"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="info"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="info"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="info"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c25"
                color="info"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="danger"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="danger"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="danger"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c26"
                color="danger"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="warning"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="warning"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="warning"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c27"
                color="warning"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="dark"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="dark"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="dark"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c28"
                color="dark"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="white"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="white"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="white"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c29"
                color="white"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="royalBlue"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="royalBlue"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="royalBlue"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c30"
                color="royalBlue"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="java"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="java"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="java"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c31"
                color="java"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="salmon"
          fill="fill"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="salmon"
            fill="fill"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="salmon"
              fill="fill"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c32"
                color="salmon"
                fill="fill"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
      </div>
      <div>
        <Button
          color="primary"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="primary"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="primary"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c33"
                color="primary"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="secondary"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="secondary"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="secondary"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c34"
                color="secondary"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="success"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="success"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="success"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c35"
                color="success"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="info"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="info"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="info"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c36"
                color="info"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="danger"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="danger"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="danger"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c37"
                color="danger"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="warning"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="warning"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="warning"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c38"
                color="warning"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="dark"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="dark"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="dark"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c39"
                color="dark"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="white"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="white"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="white"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c40"
                color="white"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="royalBlue"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="royalBlue"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="royalBlue"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c41"
                color="royalBlue"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="java"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="java"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="java"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c42"
                color="java"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
        <Button
          color="salmon"
          fill="outline"
          onClick={[Function]}
          preventDefault={true}
          small={true}
          stopPropagation={true}
        >
          <styled.button
            color="salmon"
            fill="outline"
            onClick={[Function]}
            small={true}
            type="button"
          >
            <StyledComponent
              color="salmon"
              fill="outline"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c43",
                    "rules": Array [
                      "
  background-color: ",
                      [Function],
                      ";
  border-color: ",
                      [Function],
                      ";
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  line-height: ",
                      [Function],
                      ";
  padding: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
  cursor: pointer;
  color: ",
                      [Function],
                      ";

  &:hover {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      "
  }

  &:active {
    background-color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    box-shadow: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.button",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              small={true}
              type="button"
            >
              <button
                className="c43"
                color="salmon"
                fill="outline"
                onClick={[Function]}
                type="button"
              >
                Hello
              </button>
            </StyledComponent>
          </styled.button>
        </Button>
      </div>
    </div>
  </TestPage>
</ThemeProvider>
`;
